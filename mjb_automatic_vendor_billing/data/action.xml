<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="x_mjb_automated_vendor_bill_rule_action" model="ir.actions.server">
        <field name="name">MJB | Action |- Automatic Vendor Billing Rule Engine - Start/Stop</field>
        <field name="model_id" ref="mjb_automatic_vendor_billing.model_automatic_billing_rule_engine"/>
        <field name="state">code</field>
        <field name="code">
if record.x_period != 'on_receive':
    if record and record.x_state == 'draft' and record.x_boolean_start_stop_action == False:
        pass
    elif not record.x_boolean_start_stop_action:
        record.x_cron_id['active'] = False
        record['x_state'] = 'stopped'
    else:
        action_name = 'MJB - Scheduled Vendor Billing Automation Rule ID#%s' %(record.id)

        scheduled_action = env['ir.cron'].search([('name', '=', action_name)])
        reportPastValues = """
def _engine_create_group_vendor_bill(self, vendor_billing_rule_id, all_model_record_lines_ids):
    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')

    # Prepare invoice vals and clean-up the section lines
    invoice_vals_dict = {}
    for order in self:
        if order.invoice_status != 'to invoice':
            continue

        order = order.with_company(order.company_id)
        # Invoice values.
        invoice_vals = order._prepare_invoice()
        # Invoice line values (keep only necessary sections).
        map_domain_po_lines_ids = all_model_record_lines_ids &amp; order.order_line
        map_domain_po_lines_ids = map_domain_po_lines_ids.filtered(lambda l: l.product_id.purchase_method == 'receive')
        for line in map_domain_po_lines_ids:
            if line.display_type == 'line_section':
                continue
            if (line.product_qty - line.qty_invoiced) &gt; 0 and vendor_billing_rule_id.not_float_is_zero(line.qty_to_invoice, precision) == True:
                partner_id = line.order_id.partner_id.id
                if partner_id not in invoice_vals_dict:
                    invoice_vals_dict[partner_id] = invoice_vals.copy()
                    invoice_vals_dict[partner_id]['invoice_line_ids'] = []
                line_vals = line._prepare_account_move_line()
                invoice_vals_dict[partner_id]['invoice_line_ids'].append((0, 0, line_vals))

    if not invoice_vals_dict:
        raise(UserError('There is no invoiceable line. If a product has a control policy based on received quantity, please make sure that a quantity has been received.'))

    # Create invoices
    moves = self.env['account.move']
    AccountMove = self.env['account.move'].with_context(default_move_type='in_invoice')
    for partner_id, invoice_vals in invoice_vals_dict.items():
        moves |= AccountMove.with_company(invoice_vals['company_id']).create(invoice_vals)

    # Some moves might actually be refunds: convert them if the total amount is negative
    # We do this after the moves have been created since we need taxes, etc. to know if the total
    # is actually negative or not
    moves.filtered(lambda m: m.currency_id.round(m.amount_total) &lt; 0).action_switch_move_type()

def _engine_create_non_group_vendor_bill(self, vendor_billing_rule_id, all_model_record_lines_ids):
    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')

    # Prepare invoice vals and clean-up the section lines
    invoice_vals_list = []
    sequence = 10
    for order in self:
        if order.invoice_status != 'to invoice':
            continue

        order = order.with_company(order.company_id)
        pending_section = None
        # Invoice values.
        invoice_vals = order._prepare_invoice()
        # Invoice line values (keep only necessary sections).
        map_domain_po_lines_ids = all_model_record_lines_ids &amp; order.order_line
        map_domain_po_lines_ids = map_domain_po_lines_ids.filtered(lambda l: l.product_id.purchase_method == 'receive')
        for line in map_domain_po_lines_ids:
            if line.display_type == 'line_section':
                pending_section = line
                continue
            if (line.product_qty - line.qty_invoiced) &gt; 0 and vendor_billing_rule_id.not_float_is_zero(line.qty_to_invoice, precision) == True:
                if pending_section:
                    line_vals = pending_section._prepare_account_move_line()
                    line_vals.update({'sequence': sequence})
                    invoice_vals['invoice_line_ids'].append((0, 0, line_vals))
                    sequence += 1
                    pending_section = None
                line_vals = line._prepare_account_move_line()
                line_vals.update({'sequence': sequence})
                invoice_vals['invoice_line_ids'].append((0, 0, line_vals))
                sequence += 1
        invoice_vals_list.append(invoice_vals)

    if not invoice_vals_list:
        raise(UserError('There is no invoiceable line. If a product has a control policy based on received quantity, please make sure that a quantity has been received.'))

    new_invoice_vals_list = []
    for grouping_keys, invoices in vendor_billing_rule_id.itertools_group(invoice_vals_list):
        origins = set()
        payment_refs = set()
        refs = set()
        ref_invoice_vals = None
        for invoice_vals in invoices:
            if not ref_invoice_vals:
                ref_invoice_vals = invoice_vals
            else:
                ref_invoice_vals['invoice_line_ids'] += invoice_vals['invoice_line_ids']
            origins.add(invoice_vals['invoice_origin'])
            payment_refs.add(invoice_vals['payment_reference'])
            refs.add(invoice_vals['ref'])
        ref_invoice_vals.update({
            'ref': ', '.join(refs)[:2000],
            'invoice_origin': ', '.join(origins),
            'payment_reference': len(payment_refs) == 1 and payment_refs.pop() or False,
        })
        new_invoice_vals_list.append(ref_invoice_vals)
    invoice_vals_list = new_invoice_vals_list

    moves = self.env['account.move']
    AccountMove = self.env['account.move'].with_context(default_move_type='in_invoice')
    for vals in invoice_vals_list:
        moves |= AccountMove.with_company(vals['company_id']).create(vals)

    # Some moves might actually be refunds: convert them if the total amount is negative
    # We do this after the moves have been created since we need taxes, etc. to know if the total
    # is actually negative or not
    moves.filtered(lambda m: m.currency_id.round(m.amount_total) &lt; 0).action_switch_move_type()

def _create_group_bills(self, vendor_billing_rule_id, all_model_record_lines_ids):
    if vendor_billing_rule_id.x_engine_type == 'vendor':
        _engine_create_group_vendor_bill(self, vendor_billing_rule_id, all_model_record_lines_ids)
    if vendor_billing_rule_id.x_engineah_type == 'partner':
        # all_model_record_ids._create_invoices(final=False)
        sapi = env['sale.advance.payment.inv'].create({
            'sale_order_ids': [(6,0,all_model_record_ids.ids)]
        })
        so_invoice = sapi.create_invoices()
        if vendor_billing_rule_id.x_action_post:
            env['account.move'].browse(int(so_invoice['res_id'])).action_post()
        
def _create_not_group_bills(self,vendor_billing_rule_id,all_model_record_lines_ids):
    if vendor_billing_rule_id.x_engine_type == 'vendor':
        _engine_create_non_group_vendor_bill(self, vendor_billing_rule_id, all_model_record_lines_ids)
    if vendor_billing_rule_id.x_engine_type == 'partner':
        for so in all_model_record_ids:
            # so._create_invoices(final=False)
            sapi = env['sale.advance.payment.inv'].create({
                'sale_order_ids': [(6,0,so.ids)]
            })
            so_invoice = sapi.create_invoices()
            if vendor_billing_rule_id.x_action_post:
                env['account.move'].browse(int(so_invoice['res_id'])).action_post()

record_id = %s
self = env['automatic.billing.rule.engine'].search([('id','=',record_id)])

model = 'purchase.order.line' if self.x_engine_type == 'vendor' else 'sale.order.line'

all_model_record_lines_ids = self.env[model].search(self._get_current_domain())
all_model_record_ids = all_model_record_lines_ids.mapped('order_id')

if self.x_group_bill == True:
    _create_group_bills(all_model_record_ids, self, all_model_record_lines_ids)
elif self.x_group_bill == False:
    _create_not_group_bills(all_model_record_ids, self, all_model_record_lines_ids)
        """%(
            record.id,
        )
        if record.x_cron_id:
            record.x_cron_id['code'] = reportPastValues
            record.x_cron_id['active'] = True
            record['x_state'] = 'running'
        else:
            now = datetime.datetime.now()
            today = datetime.date.today()

            day_end_of_day = today.day
            end_of_week = today + datetime.timedelta(days=(6 - today.weekday()))
            day_end_of_week = end_of_week.day
            day_end_of_month = record._get_end_day_of_month(today.year)

            # Calculate next run time
            if record.x_period == 'end_of_day':
                nextcall = now.replace(day=day_end_of_day,hour=23, minute=59, second=59)
                interval_number = 1
                interval_type = 'days'
            elif record.x_period == 'end_of_week':
                nextcall = now.replace(day=day_end_of_week,hour=23, minute=59, second=59)  # Sunday
                interval_number = 1
                interval_type = 'weeks'
            elif record.x_period == 'end_of_month':
                nextcall = now.replace(day=day_end_of_month,hour=23, minute=59, second=59)
                interval_number = 1
                interval_type = 'months'
            elif record.x_period == 'custom':
                interval_number = record.x_interval_number
                interval_type = record.x_interval_type
                nextcall = now
            
            vals = {
                'name': action_name,
                'user_id': record.create_uid.id,
                'interval_number': interval_number,
                'interval_type': interval_type,
                'numbercall': -1,
                'model_id': record.x_model_id.id,
                'code': reportPastValues,
                'nextcall': nextcall,
                'active': True,
                'priority': 5,
            }
            scheduled_action = env['ir.cron'].create(vals)

            record['x_state'] = 'running'
            record['x_cron_id'] = scheduled_action.id
        </field>
    </record>

    <record id="x_mjb_onchange_period_option_rule_action" model="ir.actions.server">
        <field name="name">MJB | Action |- Onchnage - Period Option For Vendor Billing</field>
        <field name="model_id" ref="mjb_automatic_vendor_billing.model_automatic_billing_rule_engine"/>
        <field name="state">code</field>
        <field name="code">
if record.x_cron_id and record.x_period != 'on_receive':
    now = datetime.datetime.now()
    today = datetime.date.today()

    day_end_of_day = today.day
    end_of_week = today + datetime.timedelta(days=(6 - today.weekday()))
    day_end_of_week = end_of_week.day
    day_end_of_month = record._get_end_day_of_month(today.year)

    if record.x_period == 'end_of_day':
        nextcall = now.replace(day=day_end_of_day,hour=23, minute=59, second=59)
        interval_number = 1
        interval_type = 'days'
    elif record.x_period == 'end_of_week':
        nextcall = now.replace(day=day_end_of_week,hour=23, minute=59, second=59)  # Sunday
        interval_number = 1
        interval_type = 'weeks'
    elif record.x_period == 'end_of_month':
        nextcall = now.replace(day=day_end_of_month,hour=23, minute=59, second=59)
        interval_number = 1
        interval_type = 'months'
    elif record.x_period == 'custom':
        nextcall = now
        interval_number = record.x_interval_number
        interval_type = record.x_interval_type

    record.x_cron_id['interval_number'] = interval_number
    record.x_cron_id['interval_type'] = interval_type
    record.x_cron_id['nextcall'] = nextcall
        </field>
    </record>

    <record id="x_mjb_automated_period_on_receive_action" model="ir.actions.server">
        <field name="name">MJB | Action |- On Receive - Period Option For Vendor Billing</field>
        <field name="model_id" ref="mjb_automatic_vendor_billing.model_automatic_billing_rule_engine"/>
        <field name="state">code</field>
        <field name="code">
if record.x_period == 'on_receive':
    if record and record.x_state == 'draft' and record.x_boolean_start_stop_action == False:
        pass
    elif not record.x_boolean_start_stop_action:
        record.x_base_automation_id['active'] = False
        record['x_state'] = 'stopped'
    else:
        action_name = 'MJB - Automated Action Vendor Billing Rule ID#%s' %(record.id) if record.x_engine_type == 'vendor' else 'MJB - Automated Action Parnter Billing Rule ID#%s' %(record.id)

        base_automation = env['base.automation'].search([('name', '=', action_name)])
        baseAutomationCode = """
def _create_vendor_bills(self,billing_rule_id,map_domain_po_lines_ids):
    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')

    # Prepare invoice vals and clean-up the section lines
    invoice_vals_list = []
    sequence = 10
    for order in self:
        if order.invoice_status != 'to invoice':
            continue

        order = order.with_company(order.company_id)
        pending_section = None
        # Invoice values.
        invoice_vals = order._prepare_invoice()
        # Invoice line values (keep only necessary sections).
        
        for line in map_domain_po_lines_ids:
            if line.display_type == 'line_section':
                pending_section = line
                continue
            if billing_rule_id.not_float_is_zero(line.qty_to_invoice, precision) == True:
                if pending_section:
                    line_vals = pending_section._prepare_account_move_line()
                    line_vals.update({'sequence': sequence})
                    invoice_vals['invoice_line_ids'].append((0, 0, line_vals))
                    sequence += 1
                    pending_section = None
                line_vals = line._prepare_account_move_line()
                line_vals.update({'sequence': sequence})
                invoice_vals['invoice_line_ids'].append((0, 0, line_vals))
                sequence += 1
        invoice_vals_list.append(invoice_vals)

    if not invoice_vals_list:
        raise(UserError('There is no invoiceable line. If a product has a control policy based on received quantity, please make sure that a quantity has been received.'))

    new_invoice_vals_list = []
    for grouping_keys, invoices in billing_rule_id.itertools_group(invoice_vals_list):
        origins = set()
        payment_refs = set()
        refs = set()
        ref_invoice_vals = None
        for invoice_vals in invoices:
            if not ref_invoice_vals:
                ref_invoice_vals = invoice_vals
            else:
                ref_invoice_vals['invoice_line_ids'] += invoice_vals['invoice_line_ids']
            origins.add(invoice_vals['invoice_origin'])
            payment_refs.add(invoice_vals['payment_reference'])
            refs.add(invoice_vals['ref'])
        ref_invoice_vals.update({
            'ref': ', '.join(refs)[:2000],
            'invoice_origin': ', '.join(origins),
            'payment_reference': len(payment_refs) == 1 and payment_refs.pop() or False,
        })
        new_invoice_vals_list.append(ref_invoice_vals)
    invoice_vals_list = new_invoice_vals_list

    moves = self.env['account.move']
    AccountMove = self.env['account.move'].with_context(default_move_type='in_invoice')
    for vals in invoice_vals_list:
        moves |= AccountMove.with_company(vals['company_id']).create(vals)

    # Some moves might actually be refunds: convert them if the total amount is negative
    # We do this after the moves have been created since we need taxes, etc. to know if the total
    # is actually negative or not
    moves.filtered(lambda m: m.currency_id.round(m.amount_total) &lt; 0).action_switch_move_type()
    if billing_rule_id.x_action_post:
        moves.action_post()

for record in records:
  if record.state == 'done':
    record_id = %s
    engine_type = '%s'
    billing_rule_id = env['automatic.billing.rule.engine'].search([('id','=',record_id)])
    if engine_type == 'vendor' and record.purchase_id:
        all_model_record_lines_ids = billing_rule_id.env['purchase.order.line'].search(billing_rule_id._get_current_domain())
        po_lines_ids = record.purchase_id.order_line
        map_domain_po_lines_ids = po_lines_ids &amp; all_model_record_lines_ids
        map_domain_po_lines_ids = map_domain_po_lines_ids.filtered(lambda l: l.product_id.purchase_method == 'receive')
        if map_domain_po_lines_ids:
            _create_vendor_bills(record.purchase_id, billing_rule_id, map_domain_po_lines_ids)
    if engine_type == 'partner' and record.sale_id:
        all_model_record_lines_ids = billing_rule_id.env['sale.order.line'].search(billing_rule_id._get_current_domain())
        so_lines_ids = record.sale_id.order_line
        map_domain_so_lines_ids = so_lines_ids &amp; all_model_record_lines_ids
        map_domain_so_lines_ids = map_domain_so_lines_ids.filtered(lambda l: l.product_id.purchase_method == 'receive')
        if map_domain_so_lines_ids:
            # record.sale_id._create_invoices(grouped=True,final=False)
            sapi = env['sale.advance.payment.inv'].create({
                'sale_order_ids': [(6,0,record.sale_id.ids)]
            })
            so_invoice = sapi.create_invoices()
            if billing_rule_id.x_action_post:
                env['account.move'].browse(int(so_invoice['res_id'])).action_post()
        """%(
            record.id, record.x_engine_type
        )
        if record.x_base_automation_id:
            record.x_base_automation_id.action_server_ids[0]['code'] = baseAutomationCode
            record.x_base_automation_id['active'] = True
            record['x_state'] = 'running'
        else:
            model_id = env.ref('stock.model_stock_picking').id
            vals_action = {
                'name': 'Action -'+action_name,
                'model_id': model_id,
                'state': 'code',
                'code': baseAutomationCode,
            }
            server_action = env['ir.actions.server'].create(vals_action)

            vals = {
                'name': action_name,
                'model_id': model_id,
                'action_server_ids': [(4,server_action.id)],
                'trigger': 'on_create_or_write',
                'trigger_field_ids': env.ref('stock.field_stock_picking__state').ids,
            }
            base_automation = env['base.automation'].create(vals)

            record['x_state'] = 'running'
            record['x_base_automation_id'] = base_automation.id
        </field>
    </record>
</odoo>